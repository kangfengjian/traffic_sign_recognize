{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%%bash\ngit init\ngit clone https://github.com/kangfengjian/TinyLIC.git","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:12:27.127118Z","iopub.execute_input":"2025-01-19T08:12:27.127501Z","iopub.status.idle":"2025-01-19T08:12:29.057758Z","shell.execute_reply.started":"2025-01-19T08:12:27.127463Z","shell.execute_reply":"2025-01-19T08:12:29.056651Z"}},"outputs":[{"name":"stdout","text":"Initialized empty Git repository in /kaggle/working/.git/\n","output_type":"stream"},{"name":"stderr","text":"hint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint: \tgit config --global init.defaultBranch <name>\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint: \tgit branch -m <name>\nCloning into 'TinyLIC'...\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"%%bash\ncd TinyLIC/\nls -l","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:20:23.887510Z","iopub.execute_input":"2025-01-19T08:20:23.887843Z","iopub.status.idle":"2025-01-19T08:20:23.900494Z","shell.execute_reply.started":"2025-01-19T08:20:23.887819Z","shell.execute_reply":"2025-01-19T08:20:23.899487Z"}},"outputs":[{"name":"stdout","text":"total 52\ndrwxr-xr-x 11 root root  4096 Jan 19 08:12 compressai\ndrwxr-xr-x  2 root root  4096 Jan 19 08:12 examples\n-rw-r--r--  1 root root 11357 Jan 19 08:12 LICENSE\n-rw-r--r--  1 root root  2300 Jan 19 08:12 Makefile\n-rw-r--r--  1 root root   818 Jan 19 08:12 pyproject.toml\n-rw-r--r--  1 root root  3253 Jan 19 08:12 README.md\n-rw-r--r--  1 root root  2202 Jan 19 08:12 requirements.txt\ndrwxr-xr-x  4 root root  4096 Jan 19 08:12 results\n-rw-r--r--  1 root root  5284 Jan 19 08:12 setup.py\ndrwxr-xr-x  3 root root  4096 Jan 19 08:12 third_party\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"%%writefile TinyLIC/README.md\n# High-Efficiency Lossy Image Coding Through Adaptive Neighborhood Information Aggregation\nPytorch Implementation of our paper \"High-Efficiency Lossy Image Coding Through Adaptive Neighborhood Information Aggregation\"[[arXiv]](https://arxiv.org/abs/2204.11448). More details can be found at the [homepage](https://njuvision.github.io/TinyLIC/). \n\n## News\n- __[22.12.16]__ The MS-SSIM optimized pretrained models and evaluation results are uploaded for reference.\n- __[22.11.09]__ We fix a bug for the implement of the multistage context model and the performance is improved slightly, the models are retrained and you need to download the new ones.\n- __[22.10.27]__ The latest version of our TinyLIC is released with more efficient network architecture in both transform and entropy coding modules. More details can be found in the paper.\n\n## Installation\nTo get started locally and install the development version of our work, run the following commands (The [docker environment](https://hub.docker.com/layers/pytorch/pytorch/1.11.0-cuda11.3-cudnn8-devel/images/sha256-9bfcfa72b6b244c1fbfa24864eec97fb29cfafc065999e9a9ba913fa1e690a02?context=explore) is recommended):\n```bash\ngit clone https://github.com/lumingzzz/TinyLIC.git\ncd TinyLIC\npip install -U pip && pip install -e .\n```\n\n## Usage\n\n### Train\nWe use the [Flicker2W](https://github.com/liujiaheng/CompressionData) dataset for training, and the [script](https://github.com/xyq7/InvCompress/tree/main/codes/scripts) for preprocessing.\n\nRun the script for a simple training pipeline:\n```bash\npython examples/train.py -m tinylic -d /path/to/my/image/dataset/ --epochs 400 -lr 1e-4 --batch-size 8 --cuda --save\n```\nThe training checkpoints will be generated in the \"chekpoints\" folder at the current directory. You can change the default folder by modifying the function \"init()\" in \"expample/train.py\".\n\n\n### Evaluation\nPre-trained models can be downloaded in [NJU Box](https://box.nju.edu.cn/d/d5e8243f5e4b44848769/). The R-D results of three popular datasets can be found in [/results](https://github.com/lumingzzz/TinyLIC/tree/main/results) for reference.\n\nAn example to evaluate model:\n```bash\npython -m compressai.utils.eval_model checkpoint path/to/eval/data/ -a tinylic -p path/to/pretrained/model --cuda\n```\n\n## Citation\nIf you find this work useful for your research, please cite:\n\n```\n@article{lu2022high,\n  title={High-Efficiency Lossy Image Coding Through Adaptive Neighborhood Information Aggregation},\n  author={Lu, Ming and Ma, Zhan},\n  journal={arXiv preprint arXiv:2204.11448},\n  year={2022}\n}\n```\n\n## Acknowledgement\nThis framework is based on [CompressAI](https://github.com/InterDigitalInc/CompressAI/), we add our modifications mainly in compressai.models.tinylic and compressai.layers for usage. You can refer to the paper for a comprehensive understanding.\n\nThe TinyLIC model is partially built upon the [Neighborhood Attention Transformer](https://github.com/SHI-Labs/Neighborhood-Attention-Transformer) and the open-sourced unofficial implementation of [Checkerboard Context Model](https://github.com/leelitian/Checkerboard-Context-Model-Pytorch). We thank the authors for sharing their codes.\n\n## Contact\nIf you have any question, please contact me via minglu@nju.edu.cn.\n","metadata":{"execution":{"iopub.status.busy":"2025-01-19T08:22:39.913045Z","iopub.execute_input":"2025-01-19T08:22:39.913465Z","iopub.status.idle":"2025-01-19T08:22:39.919437Z","shell.execute_reply.started":"2025-01-19T08:22:39.913432Z","shell.execute_reply":"2025-01-19T08:22:39.918124Z"}}},{"cell_type":"code","source":"%%bash\ncd TinyLIC/\ntouch mytest.py","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:28:56.255340Z","iopub.execute_input":"2025-01-19T08:28:56.255657Z","iopub.status.idle":"2025-01-19T08:28:56.267157Z","shell.execute_reply.started":"2025-01-19T08:28:56.255636Z","shell.execute_reply":"2025-01-19T08:28:56.265797Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"%%writefile TinyLIC/mytest.py\nimport time \nfor i in range(10):\n    time.sleep(0.5)\n    print(i)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:30:37.841292Z","iopub.execute_input":"2025-01-19T08:30:37.841619Z","iopub.status.idle":"2025-01-19T08:30:37.847815Z","shell.execute_reply.started":"2025-01-19T08:30:37.841593Z","shell.execute_reply":"2025-01-19T08:30:37.846830Z"}},"outputs":[{"name":"stdout","text":"Overwriting TinyLIC/mytest.py\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"!python TinyLIC/mytest.py","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:32:52.342559Z","iopub.execute_input":"2025-01-19T08:32:52.342927Z","iopub.status.idle":"2025-01-19T08:32:57.579950Z","shell.execute_reply.started":"2025-01-19T08:32:52.342898Z","shell.execute_reply":"2025-01-19T08:32:57.578452Z"}},"outputs":[{"name":"stdout","text":"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"# !zip TinyLIC.zip TinyLIC/*\n# !cp TinyLIC.zip ../output\n!ls -l ../","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-19T08:38:57.300119Z","iopub.execute_input":"2025-01-19T08:38:57.300542Z","iopub.status.idle":"2025-01-19T08:38:57.421778Z","shell.execute_reply.started":"2025-01-19T08:38:57.300510Z","shell.execute_reply":"2025-01-19T08:38:57.420429Z"}},"outputs":[{"name":"stdout","text":"total 12\ndrwxr-xr-x 2 root root 4096 Jan 19 08:12 input\ndrwxr-xr-x 3 root root 4096 Jan 19 08:12 lib\ndrwxr-xr-x 5 root root 4096 Jan 19 08:38 working\n","output_type":"stream"}],"execution_count":27}]}